<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Utilities.ttinclude" #><#@ output extension=".cs" #>
#region License

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TypeInfo{T}.cs" company="MorseCode Software">
// Copyright (c) 2015 MorseCode Software
// </copyright>
// <summary>
// The MIT License (MIT)
// 
// Copyright (c) 2015 MorseCode Software
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace MorseCode.BetterReflection
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Reflection;
    using System.Runtime.Serialization;
    using System.Security.Permissions;

    [Serializable]
    internal class TypeInfo<T> : ITypeInfo<T>, ISerializable
    {
        #region Fields

        private readonly Type type;

        private readonly ITypeInfo<T> typeInfo;

        #endregion

        #region Constructors and Destructors

        public TypeInfo()
        {
            this.type = typeof(T);
            this.typeInfo = this;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TypeInfo{T}"/> class from serialized data.
        /// </summary>
        /// <param name="info">
        /// The serialization info.
        /// </param>
        /// <param name="context">
        /// The serialization context.
        /// </param>
        [ContractVerification(false)]
        // ReSharper disable UnusedParameter.Local
        protected TypeInfo(SerializationInfo info, StreamingContext context)
            // ReSharper restore UnusedParameter.Local
            : this()
        {
        }

        #endregion

        #region Explicit Interface Properties

        Type ITypeInfo.Type
        {
            get
            {
                return this.type;
            }
        }

        string ITypeInfo.Name
        {
            get
            {
                return this.type.Name;
            }
        }

        string ITypeInfo.FullName
        {
            get
            {
                return this.type.FullName;
            }
        }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        /// Gets the object data to serialize.
        /// </summary>
        /// <param name="info">
        /// The serialization info.
        /// </param>
        /// <param name="context">
        /// The serialization context.
        /// </param>
        [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
        }

        #endregion

        #region Explicit Interface Methods

        IEnumerable<IPropertyInfo<T>> ITypeInfo<T>.GetProperties()
        {
            return typeof(T).GetProperties().Select(PropertyInfoCache<T>.GetPropertyInfo);
        }

        IEnumerable<IPropertyInfo> ITypeInfo.GetProperties()
        {
            return this.typeInfo.GetProperties();
        }

        IPropertyInfo ITypeInfo.GetProperty(string name)
        {
            return this.typeInfo.GetProperty(name);
        }

        IPropertyInfo<T> ITypeInfo<T>.GetProperty(string name)
        {
            PropertyInfo propertyInfo = typeof(T).GetProperty(name);
            return propertyInfo == null ? null : PropertyInfoCache<T>.GetPropertyInfo(propertyInfo);
        }

        IReadablePropertyInfo<T, TProperty> ITypeInfo<T>.GetReadableProperty<TProperty>(Expression<Func<T, TProperty>> propertyExpression)
        {
            return PropertyInfoCache<T>.GetReadablePropertyInfo<TProperty>(GetPropertyInfo(propertyExpression));
        }

        IWritablePropertyInfo<T, TProperty> ITypeInfo<T>.GetWritableProperty<TProperty>(Expression<Func<T, TProperty>> propertyExpression)
        {
            return PropertyInfoCache<T>.GetWritablePropertyInfo<TProperty>(GetPropertyInfo(propertyExpression));
        }

        IReadWritePropertyInfo<T, TProperty> ITypeInfo<T>.GetReadWriteProperty<TProperty>(Expression<Func<T, TProperty>> propertyExpression)
        {
            return PropertyInfoCache<T>.GetReadWritePropertyInfo<TProperty>(GetPropertyInfo(propertyExpression));
        }

        IEnumerable<IMethodInfo> ITypeInfo.GetMethods()
        {
            return this.typeInfo.GetMethods();
        }

        IEnumerable<IMethodInfo<T>> ITypeInfo<T>.GetMethods()
        {
            return typeof(T).GetMethods().Select(MethodInfoCache<T>.GetMethodInfo);
        }

        IMethodInfo ITypeInfo.GetMethod(string name)
        {
            return this.typeInfo.GetMethod(name);
        }

        IMethodInfo<T> ITypeInfo<T>.GetMethod(string name)
        {
            MethodInfo methodInfo = typeof(T).GetMethod(name);
            return methodInfo == null ? null : MethodInfoCache<T>.GetMethodInfo(methodInfo);
        }
<# Enumerable.Range(0, MaximumNumberOfParameters + 1).ToList().ForEach(n => { #>

        IMethodInfo<T<#= this.GetTParametersString(n, true) #>, TReturn> ITypeInfo<T>.GetMethod<<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ", ")) #>TReturn>(Expression<Func<T, Func<<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ", ")) #>TReturn>>> methodExpression)
        {
            MethodInfo methodInfo = GetMethodInfo(methodExpression);
            return MethodInfoCache<T>.GetMethodInfo<<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ", ")) #>TReturn>(methodInfo);
        }
<# }); #>
<# Enumerable.Range(0, MaximumNumberOfParameters + 1).ToList().ForEach(n => { #>

        IVoidMethodInfo<T<#= this.GetTParametersString(n, true) #>> ITypeInfo<T>.GetVoidMethod<# if(n > 0) { #><<#= string.Join(", ", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>><# } #>(Expression<Func<T, Action<# if(n > 0) { #><<#= string.Join(", ", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>><# } #>>> methodExpression)
        {
            MethodInfo methodInfo = GetMethodInfo(methodExpression);
            return MethodInfoCache<T>.GetVoidMethodInfo<# if(n > 0) { #><<#= string.Join(", ", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>><# } #>(methodInfo);
        }
<# }); #>

        private static MethodInfo GetMethodInfo<TMethod>(Expression<Func<T, TMethod>> methodExpression)
        {
            return StaticReflection<T>.GetMethodInfoInternal(methodExpression);
        }

        private static PropertyInfo GetPropertyInfo<TProperty>(Expression<Func<T, TProperty>> propertyExpression)
        {
            MemberInfo memberInfo = StaticReflection<T>.GetMemberInfoInternal(propertyExpression);
            PropertyInfo propertyInfo = memberInfo as PropertyInfo;
            if (propertyInfo == null)
            {
                throw new InvalidOperationException("Expression is not a property.");
            }

            return propertyInfo;
        }

        #endregion
    }
}