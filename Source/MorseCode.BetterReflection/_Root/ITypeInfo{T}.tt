<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Utilities.ttinclude" #><#@ output extension=".cs" #>
#region License

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ITypeInfo{T}.cs" company="MorseCode Software">
// Copyright (c) 2015 MorseCode Software
// </copyright>
// <summary>
// The MIT License (MIT)
// 
// Copyright (c) 2015 MorseCode Software
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace MorseCode.BetterReflection
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.Linq.Expressions;

    /// <summary>
    /// An interface representing type info for type <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">
    /// The type represented by this type info.
    /// </typeparam>
    [ContractClass(typeof(TypeInfoInterfaceContract<>))]
    public interface ITypeInfo<T> : ITypeInfo
    {
        #region Public Methods and Operators

        /// <summary>
        /// Gets a property info instance for each public instance property accessible through type <typeparamref name="T"/>.
        /// </summary>
        /// <returns>
        /// An enumerable of property info instances for each public instance property accessible through type <typeparamref name="T"/>.
        /// </returns>
        new IEnumerable<IPropertyInfo<T>> GetProperties();

        /// <summary>
        /// Gets a property info instance for the public instance property with name <paramref name="name"/> accessible through type <typeparamref name="T"/>.
        /// </summary>
        /// <param name="name">
        /// The name of the property for which to get property info.
        /// </param>
        /// <returns>
        /// A property info instance for the public instance property with name <paramref name="name"/> accessible through type <typeparamref name="T"/> if
        /// it exists, <c>null</c> otherwise.
        /// </returns>
        new IPropertyInfo<T> GetProperty(string name);

        /// <summary>
        /// Gets a readable property info instance for the property represented by <paramref name="propertyExpression"/>.
        /// </summary>
        /// <typeparam name="TProperty">
        /// The type of the property.
        /// </typeparam>
        /// <param name="propertyExpression">
        /// The property expression of the form <c>o => o.Property</c> which returns a readable property of type <typeparamref name="TProperty"/> given an instance of type <typeparamref name="T"/>.
        /// </param>
        /// <returns>
        /// A readable property info instance for the property represented by <paramref name="propertyExpression"/>.
        /// </returns>
        IReadablePropertyInfo<T, TProperty> GetReadableProperty<TProperty>(Expression<Func<T, TProperty>> propertyExpression);

        /// <summary>
        /// Gets a writable property info instance for the property represented by <paramref name="propertyExpression"/>.
        /// </summary>
        /// <typeparam name="TProperty">
        /// The type of the property.
        /// </typeparam>
        /// <param name="propertyExpression">
        /// The property expression of the form <c>o => o.Property</c> which returns a writable property of type <typeparamref name="TProperty"/> given an instance of type <typeparamref name="T"/>.
        /// </param>
        /// <returns>
        /// A writable property info instance for the property represented by <paramref name="propertyExpression"/>.
        /// </returns>
        IWritablePropertyInfo<T, TProperty> GetWritableProperty<TProperty>(Expression<Func<T, TProperty>> propertyExpression);

        /// <summary>
        /// Gets a readable and writable property info instance for the property represented by <paramref name="propertyExpression"/>.
        /// </summary>
        /// <typeparam name="TProperty">
        /// The type of the property.
        /// </typeparam>
        /// <param name="propertyExpression">
        /// The property expression of the form <c>o => o.Property</c> which returns a readable and writable property of type <typeparamref name="TProperty"/> given an instance of type <typeparamref name="T"/>.
        /// </param>
        /// <returns>
        /// A readable and writable property info instance for the property represented by <paramref name="propertyExpression"/>.
        /// </returns>
        IReadWritePropertyInfo<T, TProperty> GetReadWriteProperty<TProperty>(Expression<Func<T, TProperty>> propertyExpression);

        /// <summary>
        /// Gets a method info instance for each public instance method accessible through type <typeparamref name="T"/>.
        /// </summary>
        /// <returns>
        /// An enumerable of method info instances for each public instance method accessible through type <typeparamref name="T"/>.
        /// </returns>
        new IEnumerable<IMethodInfo<T>> GetMethods();

        /// <summary>
        /// Gets a method info instance for the public instance method with name <paramref name="name"/> accessible through type <typeparamref name="T"/>.
        /// </summary>
        /// <param name="name">
        /// The name of the method for which to get method info.
        /// </param>
        /// <returns>
        /// A method info instance for the public instance method with name <paramref name="name"/> accessible through type <typeparamref name="T"/> if
        /// it exists, <c>null</c> otherwise.
        /// </returns>
        new IMethodInfo<T> GetMethod(string name);
<# Enumerable.Range(0, MaximumNumberOfParameters + 1).ToList().ForEach(n => { #>

        /// <summary>
        /// Gets a method info instance for the method represented by <paramref name="methodExpression"/>.
        /// </summary>
<# Enumerable.Range(1, n).ToList().ForEach(i => {#>
        /// <typeparam name="TParameter<#= i #>">
        /// The type of the <#= this.GetOrdinalString(i) #> parameter.
        /// </typeparam>
<# }); #>
        /// <typeparam name="TReturn">
        /// The return type of the method.
        /// </typeparam>
        /// <param name="methodExpression">
        /// The property expression of the form <c>o => (Func&lt;<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ",")) #>TReturn&gt;)o.Method</c> which returns a method convertible to delegate type <see cref="Func{<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ",")) #>TReturn}"/> given an instance of type <typeparamref name="T"/>.
        /// </param>
        /// <returns>
        /// A method info instance for the method represented by <paramref name="methodExpression"/>.
        /// </returns>
        IMethodInfo<T<#= this.GetTParametersString(n, true) #>, TReturn> GetMethod<<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ", ")) #>TReturn>(Expression<Func<T, Func<<#= string.Join(string.Empty, Enumerable.Range(1, n).Select(i => "TParameter" + i + ", ")) #>TReturn>>> methodExpression);
<# }); #>
<# Enumerable.Range(0, MaximumNumberOfParameters + 1).ToList().ForEach(n => { #>

        /// <summary>
        /// Gets a method info instance for the method represented by <paramref name="methodExpression"/>.
        /// </summary>
<# Enumerable.Range(1, n).ToList().ForEach(i => {#>
        /// <typeparam name="TParameter<#= i #>">
        /// The type of the <#= this.GetOrdinalString(i) #> parameter.
        /// </typeparam>
<# }); #>
        /// <param name="methodExpression">
        /// The property expression of the form <c>o => <# if(n > 0) { #>(Action&lt;<#= string.Join(",", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>&gt;)<# } #>o.Method</c> which returns a method convertible to delegate type <see cref="Action<# if(n > 0) { #>{<#= string.Join(",", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>}<# } #>"/> given an instance of type <typeparamref name="T"/>.
        /// </param>
        /// <returns>
        /// A method info instance for the method represented by <paramref name="methodExpression"/>.
        /// </returns>
        IVoidMethodInfo<T<#= this.GetTParametersString(n, true) #>> GetVoidMethod<# if(n > 0) { #><<#= string.Join(", ", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>><# } #>(Expression<Func<T, Action<# if(n > 0) { #><<#= string.Join(", ", Enumerable.Range(1, n).Select(i => "TParameter" + i)) #>><# } #>>> methodExpression);
<# }); #>

        #endregion
    }
}