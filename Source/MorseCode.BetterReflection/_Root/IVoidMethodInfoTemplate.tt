<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="TemplateFileManager.ttinclude" #>
<#@ include file="Utilities.ttinclude" #>
<#@ output extension=".cs" #>
<#
TemplateFileManager manager = TemplateFileManager.Create(this);
for(int currentNumberOfParameters = 0; currentNumberOfParameters <= MaximumNumberOfParameters; currentNumberOfParameters++)
{
    manager.StartNewFile("IVoidMethodInfo{T" + this.GetTParametersString(currentNumberOfParameters, false) + "}.cs");
#>
#region License

// --------------------------------------------------------------------------------------------------------------------
// <copyright file="IVoidMethodInfo{T<#= this.GetTParametersString(currentNumberOfParameters, false) #>}.cs" company="MorseCode Software">
// Copyright (c) 2015 MorseCode Software
// </copyright>
// <summary>
// The MIT License (MIT)
// 
// Copyright (c) 2015 MorseCode Software
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
#endregion

namespace MorseCode.BetterReflection
{
    using System.Diagnostics.Contracts;

    /// <summary>
    /// An interface representing method info for an instance method on type <typeparamref name="T"/> <#= currentNumberOfParameters > 0 ? "accepting parameters of types" : "with no parameters." #>
<# if(currentNumberOfParameters > 0) {#>
    /// <#= string.Join(", ", Enumerable.Range(1, currentNumberOfParameters).Select(n => (n == currentNumberOfParameters ? "and " : string.Empty) + "<typeparamref name=\"TParameter" + n + "\" />")) #>.
<# } #>
    /// </summary>
    /// <typeparam name="T">
    /// The type on which this instance method may be called.
    /// </typeparam>
<# Enumerable.Range(1, currentNumberOfParameters).ToList().ForEach(n => {#>
    /// <typeparam name="TParameter<#= n #>">
    /// The type of the <#= this.GetOrdinalString(n) #> parameter.
    /// </typeparam>
<# }); #>
    [ContractClass(typeof(VoidMethodInfoInterfaceContract<<#= string.Join(string.Empty, Enumerable.Range(1, currentNumberOfParameters).Select(_ => ",")) #>>))]
    public interface IVoidMethodInfo<in T<#= this.GetTParametersStringWithIn(currentNumberOfParameters) #>> : IMethodInfo<T>
    {
        #region Public Methods and Operators

        /// <summary>
        /// Invokes the method.
        /// </summary>
        /// <param name="o">
        /// The object on which to call the method.
        /// </param>
<# Enumerable.Range(1, currentNumberOfParameters).ToList().ForEach(n => {#>
        /// <param name="parameter<#= n #>">
        /// The <#= this.GetOrdinalString(n) #> parameter.
        /// </param>
<# }); #>
        void Invoke(T o<#= this.GetParametersString(currentNumberOfParameters) #>);

        #endregion
    }
}<#
}
manager.Process();
#>