<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
private const int MaximumNumberOfParameters = 8;

private string GetOrdinalString(int n)
{
	switch(n)
	{
		case 1:
			return "first";
		case 2:
			return "second";
		case 3:
			return "third";
		case 4:
			return "fourth";
		case 5:
			return "fifth";
		case 6:
			return "sixth";
		case 7:
			return "seventh";
		case 8:
			return "eighth";
		case 9:
			return "ninth";
		case 10:
			return "tenth";
		case 11:
			return "eleventh";
		case 12:
			return "twelfth";
		case 13:
			return "thirteenth";
		case 14:
			return "fourteenth";
		case 15:
			return "fifteenth";
		case 16:
			return "sixteenth";
		default:
			throw new InvalidOperationException("Could not get ordinal string for " + n + ".");
	}
}

private string GetTParametersString(int numberOfParameters, bool useSpaces)
{
    if(numberOfParameters < 1)
    {
        return string.Empty;
    }

    return "," + (useSpaces ? " " : string.Empty) + string.Join("," + (useSpaces ? " " : string.Empty), Enumerable.Range(1, numberOfParameters).Select(n => "TParameter" + n));
}

private string GetTParametersStringWithIn(int numberOfParameters)
{
    if(numberOfParameters < 1)
    {
        return string.Empty;
    }

    return ", " + string.Join(", ", Enumerable.Range(1, numberOfParameters).Select(n => "in TParameter" + n));
}

private string GetParametersString(int numberOfParameters)
{
    if(numberOfParameters < 1)
    {
        return string.Empty;
    }

    return ", " + string.Join(", ", Enumerable.Range(1, numberOfParameters).Select(n => "TParameter" + n + " parameter" + n));
}
#>